// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ixxaccccccdddjjj
    // i - 0 for A instruction, 1 for c instruction
    // if A instruction, all instruction gets loaded to a regiester
    // if c instruction a and c do COMP, d j do dest/JMP

    // i  x  x  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00

    //ARegister
    Not(in=instruction[15], out=noti);
    Mux16(a=aluOut, b=instruction, sel=noti, out=aRegMuxOut);

    Or(a=noti, b=instruction[5], out=aRegLoad);
    ARegister(in=aRegMuxOut, load=aRegLoad, out=aRegOut, out[0..14]=addressM);

    // ALU flow
    And(a=instruction[15], b=instruction[4], out=dRegLoad);
    DRegister(in=aluOut, load=dRegLoad, out=dRegOut);

    And(a=instruction[15], b=instruction[12], out=AorM);
    Mux16(a=aRegOut, b=inM, sel=AorM, out=aluMuxOut);

    ALU(x=dRegOut, y=aluMuxOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],

        out=outM,
        out=aluOut,
        zr=zrOut,
        ng=ngOut
    );


    // Write M
     And(a=instruction[15], b=instruction[3], out=writeM);

    // Program Counter
    // zr,  1 if (out == 0), 0 otherwise
    // ng;  1 if (out < 0),  0 otherwise
    Not(in=zrOut, out=notzero);
    Not(in=ngOut, out=positive);
    And(a=positive, b=notzero, out=positivenotzero);



    And(a=instruction[15], b=instruction[0], out=jumpgt);
    And(a=jumpgt, b=positivenotzero, out=loadCond1);

    And(a=instruction[15], b=instruction[1], out=jumpeq);
    And(a=jumpeq, b=zrOut, out=loadCond2);

    And(a=instruction[15], b=instruction[2], out=jumplt);
    And(a=jumplt, b=ngOut, out=loadCond3);

    Or(a=loadCond1, b=loadCond2, out=load12);
    Or(a=load12, b=loadCond3, out=loadPC);


    PC(in=aRegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);


}
